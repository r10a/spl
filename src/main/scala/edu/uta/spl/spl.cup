/********************************************************************************
*
* File: spl.cup
* The SPL parser
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;


parser code {:

    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }

:};

/* Terminals (tokens returned by the scanner). */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float 	 FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE, UMINUS,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB;

non terminal Program program;
non terminal BlockSt block_content;
non terminal Definition def;
non terminal List<Definition> defs;
non terminal List<Bind<Type>> params;
non terminal List<Bind<Expr>> reclist;
non terminal Bind<Expr> rec;

non terminal Type type;
non terminal Type returntype;
non terminal Lvalue lvalue;
non terminal List<Lvalue> lvaluelist;
non terminal Expr expr;
non terminal List<Expr> exprlist;
non terminal Stmt stmt;
non terminal List<Stmt> stmts;

precedence nonassoc	ELSE;
precedence left AND, OR;
precedence left NOT;
precedence nonassoc EQ, LT, GT, LEQ, GEQ, NEQ;
precedence left	PLUS, MINUS;
precedence left	TIMES, DIV, MOD;
precedence left UMINUS;

start with program;

program         ::= block_content:b   							{: SPL.setAST(new Program(b)); :}                  
                ;
block_content   ::= defs:dl stmts:sl							{: RESULT = new BlockSt(dl,sl); :}
				| stmts:sl       								{: RESULT = new BlockSt(nil,sl); :}         
                ;
defs            ::= defs:dl def:d SEMI							{: RESULT = append(dl, d); :}
				| def:d SEMI									{: RESULT = add(d, nil); :}
				;           
def				::= VAR ID:i EQUAL expr:e						{: RESULT = new VarDef(i, new AnyType(), e); :}
				| VAR ID:i COLON type:t EQUAL expr:e			{: RESULT = new VarDef(i, t, e); :}
				| TYPE ID:i EQUAL type:t						{: RESULT = new TypeDef(i, t); :}
				| DEF ID:i LP params:pl RP returntype:r LB block_content:b RB {: RESULT = new FuncDef(i, pl, r, b); :}
				;
params			::= ID:i COLON type:t COMMA params:pl			{: RESULT = add(new Bind<Type>(i, t), pl); :}
				| ID:i COLON type:t								{: RESULT = add(new Bind<Type>(i, t), nil); :}
				| type COMMA params
				| type
				|												{: RESULT = nil; :}
				;
returntype		::= COLON type:t								{: RESULT = t; :}
				|												{: RESULT = new NoType(); :}
				;
type			::= INT 										{: RESULT = new IntType(); :}
				| FLOAT											{: RESULT = new FloatType(); :}
				| STRING										{: RESULT = new StringType(); :}
				| BOOLEAN										{: RESULT = new BooleanType(); :}
				| ID:i											{: RESULT = new NamedType(i); :}
				| ARRAY LSB type:t RSB							{: RESULT = new ArrayType(t); :}
				| LB params:pl RB								{: RESULT = new RecordType(pl); :}
				| LP params RP
				;
lvalue			::= ID:i										{: RESULT = new Var(i); :}
				| lvalue:l LSB expr:e RSB						{: RESULT = new ArrayDeref(new LvalExp(l), e); :}
				| lvalue:l DOT ID:i								{: RESULT = new RecordDeref(new LvalExp(l), i); :}
				| lvalue:l SHARP INTEGER_LITERAL:i				{: RESULT = new TupleDeref(new LvalExp(l), i); :}
				;				                
expr            ::= INTEGER_LITERAL:n							{: RESULT = new IntConst(n); :}		
				| FLOAT_LITERAL:f								{: RESULT = new FloatConst(f); :}
				| STRING_LITERAL:s								{: RESULT = new StringConst(s); :}
				| TRUE											{: RESULT = new BooleanConst(true); :}
				| FALSE											{: RESULT = new BooleanConst(false); :}
				| lvalue:l										{: RESULT = new LvalExp(l); :}
				| MINUS expr:e				  					{: RESULT = new UnOpExp("minus", e); :}
				| NOT expr:e 									{: RESULT = new UnOpExp("not", e); :}
				| expr:e1 PLUS expr:e2							{: RESULT = new BinOpExp("plus", e1, e2); :}
				| expr:e1 MINUS expr:e2							{: RESULT = new BinOpExp("minus", e1, e2); :}
				| expr:e1 TIMES expr:e2			 				{: RESULT = new BinOpExp("times", e1, e2); :}
				| expr:e1 DIV expr:e2						 	{: RESULT = new BinOpExp("div", e1, e2); :}
				| expr:e1 MOD expr:e2						 	{: RESULT = new BinOpExp("mod", e1, e2); :}
				| expr:e1 AND expr:e2						 	{: RESULT = new BinOpExp("and", e1, e2); :}
				| expr:e1 OR expr:e2						 	{: RESULT = new BinOpExp("or", e1, e2); :}
				| expr:e1 EQ expr:e2						 	{: RESULT = new BinOpExp("eq", e1, e2); :}
				| expr:e1 NEQ expr:e2						 	{: RESULT = new BinOpExp("neq", e1, e2); :}
				| expr:e1 LT expr:e2						 	{: RESULT = new BinOpExp("lt", e1, e2); :}
				| expr:e1 LEQ expr:e2						 	{: RESULT = new BinOpExp("leq", e1, e2); :}
				| expr:e1 GT expr:e2						 	{: RESULT = new BinOpExp("gt", e1, e2); :}
				| expr:e1 GEQ expr:e2							{: RESULT = new BinOpExp("geq", e1, e2); :}
				| ARRAY LP expr:e1 COMMA expr:e2 RP 			{: RESULT = new ArrayGen(e1, e2); :}
				| ID:i LP exprlist:el RP 						{: RESULT = new CallExp(i, el); :}
				| LB reclist:rl RB								{: RESULT = new RecordExp(rl); :}
				| LP RP											{: RESULT = new NullExp(); :}
				| LP expr:e RP									{: RESULT = e; :}
				| LSB exprlist:el RSB							{: RESULT = new ArrayExp(el); :}
                ;
exprlist		::= expr:e COMMA exprlist:el					{: RESULT = add(e, el); :}
				| expr:e										{: RESULT = add(e, nil); :}
				|												{: RESULT = nil; :}
				;
reclist			::= rec:r COMMA reclist:rl						{: RESULT = add(r, rl); :}
				| rec:r											{: RESULT = add(r, nil); :}
				;
rec				::= ID:i EQUAL expr:e							{: RESULT = new Bind<Expr>(i, e); :}
				|							
				;
lvaluelist		::= lvaluelist:ll lvalue:l COMMA  				{: RESULT = append(ll ,l); :}
				| lvalue:l										{: RESULT = add(l ,nil); :}
				;
stmts           ::= stmts:sl stmt:s SEMI						{: RESULT = append(sl, s); :}
                | stmt:s SEMI									{: RESULT = add(s, nil); :}
                ;							
stmt            ::= lvalue:l EQUAL expr:e						{: RESULT = new AssignSt(l, e); :}
				| ID:i LP exprlist:el RP						{: RESULT = new CallSt(i, el); :}
				| LB block_content:b RB							{: RESULT = b; :}
				| READ LP lvaluelist:ll RP						{: RESULT = new ReadSt(ll); :}
				| PRINT LP exprlist:el RP						{: RESULT = new PrintSt(el); :}
				| IF LP expr:e RP stmt:s						{: RESULT = new IfSt(e, s, null); :}
				| IF LP expr:e RP stmt:s1 ELSE stmt:s2			{: RESULT = new IfSt(e, s1, s2); :}
				| FOR LP ID:i EQUAL expr:e1 TO expr:e2 RP stmt:s			{: RESULT = new ForSt(i, e1, e2, new IntConst(1), s); :}
				| FOR LP ID:i EQUAL expr:e1 TO expr:e2 BY expr:e3 RP stmt:s {: RESULT = new ForSt(i, e1, e2, e3, s); :}
				| WHILE LP expr:e RP stmt:s						{: RESULT = new WhileSt(e, s); :}
				| LOOP stmt:s									{: RESULT = new LoopSt(s); :}
				| EXIT											{: RESULT = new ExitSt(); :}
				| RETURN expr:e									{: RESULT = new ReturnValueSt(e); :}
				| RETURN										{: RESULT = new ReturnSt(); :}
				;